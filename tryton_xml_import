<<<<<<< HEAD
#!/usr/bin/python

# This file is part of tryton_xml_import project.
# The COPYRIGHT file at the top level of this repository
# contains the full copyright notices and license terms.

import sys
import os
import argparse
from decimal import Decimal
from xml.dom import minidom
from xml.parsers import expat


VERSION = '0.1.0'
LOCAL_IDS = {}
DIRECTORY = os.path.dirname(os.path.realpath(__file__))


def _verify_file(f, default_path):
    file_path, file_file = os.path.split(f)
    file_name = os.path.splitext(file_file)[0]
    if not file_path:
        file_path = default_path
    file_result = os.path.join(file_path, file_file)
    if not os.path.isfile(file_result):
        raise IOError(
            "Invalid file '{0}'.".format(file_result))
    if not os.access(file_result, os.R_OK):
        raise IOError(
            "User has not read access for file '{0}'.".format(
                file_result))
    return [file_name, file_result]


def _import_data(pool, file_name, data_node):
    def get_attr(element, attr_name):
        if not element.hasAttributes():
            return
        if attr_name not in element.attributes.keys():
            return
        return element.attributes[attr_name].value

    def do_eval(value):
        return eval(value)

    def get_object_id(id_):
        i = id_.find('.')
        if (i < 0):
            if id_ not in LOCAL_IDS:
                return
            return LOCAL_IDS[id_]

        module = id_[:i]
        fs_id = id_[i + 1:]

        ModelData = pool.get('ir.model.data')
        return ModelData.get_id(module, fs_id)

    def fill_fields(file_name, redord, model_obj):
        def get_xml_tag_value(node):
            'Returns the valid value of xml node'
            xml_str = node.toxml()
            start = xml_str.find('>')
            if start == -1:
                return
            end = xml_str.rfind('<')
            if end < start:
                return
            res = unescape(xml_str[start + 1:end])
            return res

        def unescape(s):
            if not isinstance(s, str):
                s = s.encode("utf-8")

            list = []

            # create and initialize a parser object
            p = expat.ParserCreate('utf-8')
            p.buffer_text = True
            # p.returns_unicode = want_unicode
            p.CharacterDataHandler = list.append

            # parse the data wrapped in a dummy element
            # (needed so the "document" is well-formed)
            p.Parse("<e>", 0)
            p.Parse(s, 0)
            p.Parse("</e>", 1)

            # join the extracted strings and return
            es = ''
            return es.join(list)

        for field in record.childNodes:
            if field.nodeName == '#comment':
                continue
            if field.nodeName != 'field':
                continue
            if 'name' not in field.attributes.keys():
                error = "Error importing {0} file. Attribute 'name' " \
                    "is required by 'field' element."
                raise Exception(error.format(file_name))
            name = field.attributes['name'].value
            if name not in model_obj._fields:
                raise Exception(
                    "Invalid field '{0}' in file '{1}'".format(
                        name, file_name))
            value = None
            if 'eval' in field.attributes.keys():
                value = do_eval(
                    get_attr(field, 'eval'))
            elif 'ref' in field.attributes.keys():
                id_ = get_attr(field, 'ref')
                value = get_object_id(id_)
                if value is None:
                    raise Exception(
                        "id '{0}' not found.".format(id_))
            elif 'search' in field.attributes.keys():
                raise NotImplementedError(
                    "'search' is not implemented.")
            elif 'pyson' in field.attributes.keys():
                raise NotImplementedError(
                    "'pyson' is not implemented.")
            else:
                value = get_xml_tag_value(field)

            field_def = model_obj._fields[name]
            if field_def._type in ['one2one', 'many2one']:
                value = pool.get(field_def.model_name)(value)
            setattr(model_obj, name, value)

    for record in data_node.childNodes:
        if record.nodeName == '#comment':
            continue
        if record.nodeName != 'record':
            continue
        model = get_attr(record, 'model')
        if not model:
            raise Exception('model attribute is required.')
        id_ = get_attr(record, 'id')

        model_obj = pool.get(model)()
        fill_fields(file_name, record, model_obj)
        model_obj.save()

        print(' Record created with id ' + str(model_obj.id))

        if id_:
            if id_ in LOCAL_IDS:
                raise Exception(
                    "Record with id '{0}' already exists.".format(
                        id_))
            LOCAL_IDS[id_] = model_obj.id


def _import_file(pool, f):
    print("Importing file '{0}'".format(f[0]))
    dom = minidom.parse(f[1])
    node = dom.getElementsByTagName('tryton')
    if not node:
        raise Exception('Not a valid tryton file.')
    node = dom.getElementsByTagName('data')
    if not node:
        raise Exception("Missing element 'data'.")
    _import_data(pool, f[0], data_node=node[0])


def _import_xml(files, args):
    if args.t:  # Tryton path
        if os.path.isdir(args.t):
            sys.path.insert(0, os.path.dirname(args.t))
    if not args.d:
        raise Exception(
            'Database parameter (-d) must be assigned.')
    if not args.u:
        raise Exception(
            'User parameter (-u) must be assigned.')
    if not args.c:
        raise Exception(
            'Configuration file parameter (-c) must be assigned.')

    from trytond.config import config
    config_file = _verify_file(args.c, DIRECTORY)[1]
    config.update_etc(config_file)

    from trytond.pool import Pool
    from trytond.cache import Cache
    from trytond.transaction import Transaction

    database_name = args.d
    user = args.u

    Pool.start()
    pool = Pool(database_name)
    pool.init()

    with Transaction().start(database_name, 0) as transaction:
        Cache.clean(database_name)
        User = pool.get('res.user')
        user_id = User.search([
            ('login', '=', user),
            ], limit=1)[0].id
        with transaction.set_user(user_id):
            for f in files:
                _import_file(pool, f)
        Cache.resets(database_name)


def _verify_files(files, path, list_file):
    if not path:
        path = DIRECTORY
    result = []

    lf = None
    if len(files) == 1 and list_file:
        lf = _verify_file(files[0], path)
    if lf is not None:
        files = []
        with open(lf[1], 'r') as ls:
            for line in ls:
                l = line.strip()
                if l:
                    files.append(l)

    for f in files:
        result.append(
            _verify_file(f, path))
    return result


def run():
    parser = argparse.ArgumentParser(
        description='Tryton Xml Data Import tool.',
        formatter_class=argparse.RawTextHelpFormatter)

    parser.add_argument(
        '-v', '--version', action='version', version=VERSION,
        help='Show version')

    help = 'List of xml files to import. Ex: party.xml uom.xml product.xml.' \
        '\nUse -x to specify a directory location.'
    parser.add_argument('files', nargs='+', help=help)

    help = 'The Tryton user. Required.'
    parser.add_argument('-u', metavar='user', help=help)

    help = 'The Tryton configuration file. Required.'
    parser.add_argument('-c', metavar='config', help=help)

    help = 'The Tryton database name. Required.'
    parser.add_argument('-d', metavar='database', help=help)

    help = 'The Tryton package path. Uses the installed one if ignored.'
    parser.add_argument('-t', metavar='tryton_path', help=help)

    help = 'Directory where xml files are located. Default: Application directory.'
    parser.add_argument('-x', metavar='xml_directory', help=help)

    help = "files argument is a file with a list of files in it."
    parser.add_argument(
        "--list-file", action='store_true', help=help)

    args = parser.parse_args()

    files = _verify_files(args.files, args.x, args.list_file)
    _import_xml(files, args)


if __name__ == "__main__":
    run()
=======
#!/usr/bin/env python

# This file is part of tryton_xml_import project.
# The COPYRIGHT file at the top level of this repository
# contains the full copyright notices and license terms.

import sys
import os
import argparse
from decimal import Decimal
from xml.dom import minidom
from xml.parsers import expat


VERSION = '0.2.0'
LOCAL_IDS = {}
DIRECTORY = os.path.dirname(os.path.realpath(__file__))


def _verify_file(f, default_path):
    file_path, file_file = os.path.split(f)
    file_name = os.path.splitext(file_file)[0]
    if not file_path:
        file_path = default_path
    file_result = os.path.join(file_path, file_file)
    if not os.path.isfile(file_result):
        raise IOError(
            "Invalid file '{0}'.".format(file_result))
    if not os.access(file_result, os.R_OK):
        raise IOError(
            "User has not read access for file '{0}'.".format(
                file_result))
    return [file_name, file_result]


def _import_data(pool, file_name, data_node, update):
    def get_attr(element, attr_name):
        if not element.hasAttributes():
            return
        if attr_name not in element.attributes.keys():
            return
        return element.attributes[attr_name].value

    def do_eval(value):
        return eval(value)

    def get_object_id(id_):
        i = id_.find('.')
        if (i < 0):
            if id_ not in LOCAL_IDS:
                return
            return LOCAL_IDS[id_]

        module = id_[:i]
        fs_id = id_[i + 1:]

        ModelData = pool.get('ir.model.data')
        return ModelData.get_id(module, fs_id)

    def get_search_id(model, domain):
        """Search according to domain
        and returns first id found."""
        eval_str = "model.search({0})".format(domain)
        obj = eval(eval_str)
        if obj:
            return obj[0].id

    def fill_fields(file_name, redord, model_obj):
        def get_xml_tag_value(node):
            'Returns the valid value of xml node'
            xml_str = node.toxml()
            start = xml_str.find('>')
            if start == -1:
                return
            end = xml_str.rfind('<')
            if end < start:
                return
            res = unescape(xml_str[start + 1:end])
            return res

        def unescape(s):
            if not isinstance(s, str):
                s = s.encode("utf-8")

            list = []

            # create and initialize a parser object
            p = expat.ParserCreate('utf-8')
            p.buffer_text = True
            # p.returns_unicode = want_unicode
            p.CharacterDataHandler = list.append

            # parse the data wrapped in a dummy element
            # (needed so the "document" is well-formed)
            p.Parse("<e>", 0)
            p.Parse(s, 0)
            p.Parse("</e>", 1)

            # join the extracted strings and return
            es = ''
            return es.join(list)

        for field in record.childNodes:
            if field.nodeName == '#comment':
                continue
            if field.nodeName != 'field':
                continue
            if 'name' not in field.attributes.keys():
                error = "Error importing {0} file. Attribute 'name' " \
                    "is required by 'field' element."
                raise Exception(error.format(file_name))
            name = field.attributes['name'].value
            if name not in model_obj._fields:
                raise Exception(
                    "Invalid field '{0}' in file '{1}'".format(
                        name, file_name))
            field_def = model_obj._fields[name]
            value = None
            if 'eval' in field.attributes.keys():
                value = do_eval(
                    get_attr(field, 'eval'))
            elif 'ref' in field.attributes.keys():
                id_ = get_attr(field, 'ref')
                value = get_object_id(id_)
                if value is None:
                    raise Exception(
                        "id '{0}' not found.".format(id_))
            elif 'search' in field.attributes.keys():
                domain = get_attr(field, 'search')
                model = pool.get(field_def.model_name)
                value = get_search_id(model, domain)
                if value is None:
                    raise Exception(
                        "search '{0}' with not result.".format(domain))
            elif 'pyson' in field.attributes.keys():
                raise NotImplementedError(
                    "'pyson' is not implemented.")
            else:
                value = get_xml_tag_value(field)

            if field_def._type in ['one2one', 'many2one']:
                value = pool.get(field_def.model_name)(value)
            elif field_def._type == 'float':
                value = round(value, field_def.digits[1])
            elif field_def._type == 'numeric':
                value = value.quantize(Decimal(10) ** -field_def.digits[1])

            setattr(model_obj, name, value)

    for record in data_node.childNodes:
        if record.nodeName == '#comment':
            continue
        if record.nodeName != 'record':
            continue
        model = get_attr(record, 'model')
        if not model:
            raise Exception('model attribute is required.')
        id_ = get_attr(record, 'id')

        if update:
            if not id_:
                raise Exception('id attribute is required for updating.')
            model_obj = pool.get(model)(int(id_))
            if not model_obj:
                raise Exception(
                    "Error updating model '{0}'. id '{1}' not found".format(
                        model, id_))
            print(' Updating record with id ' + str(model_obj.id))
        else:
            model_obj = pool.get(model)()
        fill_fields(file_name, record, model_obj)
        model_obj.save()

        print('  Record created/updated with id ' + str(model_obj.id))

        if not update:
            if id_:
                if id_ in LOCAL_IDS:
                    raise Exception(
                        "Record with id '{0}' already exists.".format(
                            id_))
                LOCAL_IDS[id_] = model_obj.id


def _import_file(pool, f, update):
    print("Importing file '{0}'".format(f[0]))
    dom = minidom.parse(f[1])
    node = dom.getElementsByTagName('tryton')
    if not node:
        raise Exception('Not a valid tryton file.')
    node = dom.getElementsByTagName('data')
    if not node:
        raise Exception("Missing element 'data'.")
    _import_data(pool, f[0], node[0], update)


def _import_xml(files, args):
    if args.t:  # Tryton path
        if os.path.isdir(args.t):
            sys.path.insert(0, os.path.dirname(args.t))
    if not args.d:
        raise Exception(
            'Database parameter (-d) must be assigned.')
    if not args.u:
        raise Exception(
            'User parameter (-u) must be assigned.')
    if not args.c:
        raise Exception(
            'Configuration file parameter (-c) must be assigned.')

    from trytond.config import config
    config_file = _verify_file(args.c, DIRECTORY)[1]
    config.update_etc(config_file)

    from trytond.pool import Pool
    from trytond.cache import Cache
    from trytond.transaction import Transaction

    database_name = args.d
    user = args.u

    Pool.start()
    pool = Pool(database_name)
    pool.init()

    with Transaction().start(database_name, 0) as transaction:
        Cache.clean(database_name)
        User = pool.get('res.user')
        user = User.search([
            ('login', '=', user),
            ], limit=1)[0]
        company_id = None
        if user.company:
            company_id = user.company.id
        with transaction.set_user(user.id):
            with transaction.set_context(company=company_id):
                for f in files:
                    _import_file(pool, f, args.update)
        Cache.resets(database_name)


def _verify_files(files, path):
    if not path:
        path = DIRECTORY
    result = []
    for f in files:
        result.append(
            _verify_file(f, path))
    return result


def run():
    parser = argparse.ArgumentParser(
        description='Tryton Xml Data Import tool.',
        formatter_class=argparse.RawTextHelpFormatter)

    parser.add_argument(
        '-v', '--version', action='version', version=VERSION,
        help='Show version')

    help = 'List of xml files to import. Ex: party.xml uom.xml product.xml.' \
        '\nUse -x to specify a directory location.'
    parser.add_argument('files', nargs='+', help=help)

    help = 'The Tryton user. Required.'
    parser.add_argument('-u', metavar='user', help=help)

    help = 'The Tryton configuration file. Required.'
    parser.add_argument('-c', metavar='config', help=help)

    help = 'The Tryton database name. Required.'
    parser.add_argument('-d', metavar='database', help=help)

    help = 'The Tryton package path. Uses the installed one if ignored.'
    parser.add_argument('-t', metavar='tryton_path', help=help)

    help = 'Directory where xml files are located. ' \
        'Default: Application directory.'
    parser.add_argument('-x', metavar='xml_directory', help=help)

    help = 'Update records according to its database id. ' \
        'No new records will be created.'
    parser.add_argument(
        "--update", action='store_true', help=help)

    args = parser.parse_args()

    files = _verify_files(args.files, args.x)
    _import_xml(files, args)


if __name__ == "__main__":
    run()
>>>>>>> fca01b93d7f7f04a5f71d53a54346ecbed65aa7e
